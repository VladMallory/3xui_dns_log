package installer

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
)

const (
	SCRIPT_PATH     = "/usr/local/bin/xui_log_archiver"
	ARCHIVE_DIR     = "/usr/local/x-ui/archives"
	STATE_FILE      = "/usr/local/x-ui/last_archived_line.txt"
	TEMP_HOURLY_LOG = "/usr/local/x-ui/temp_hourly_archive.log"
)

// Installer —É–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
type Installer struct {
	scriptPath string
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
func New() *Installer {
	return &Installer{
		scriptPath: SCRIPT_PATH,
	}
}

// InstallAutostart —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
func (i *Installer) InstallAutostart() error {
	fmt.Println("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞...")

	// –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ /usr/local/bin/
	if err := i.copySelfToBin(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
	if err := i.createDirectoriesAndFiles(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ cron
	if err := i.addCronJob(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ cron: %v", err)
	}

	fmt.Println("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç")
	fmt.Println("üì¶ –ß–∞—Å–æ–≤—ã–µ –∞—Ä—Ö–∏–≤—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ 00 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞")
	fmt.Printf("üìÅ –ê—Ä—Ö–∏–≤—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: %s\n", ARCHIVE_DIR)
	fmt.Printf("üìã –õ–æ–≥ —Ä–∞–±–æ—Ç—ã: %s/archive.log\n", ARCHIVE_DIR)
	return nil
}

// RemoveAutostart —É–¥–∞–ª—è–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
func (i *Installer) RemoveAutostart() error {
	fmt.Println("–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞...")

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π crontab
	cmd := exec.Command("crontab", "-l")
	output, err := cmd.Output()
	if err != nil && !strings.Contains(err.Error(), "no crontab") {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è crontab: %v", err)
	}

	currentCrontab := string(output)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞
	if !strings.Contains(currentCrontab, i.scriptPath) {
		fmt.Println("‚ùå –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ crontab")
		return nil
	}

	// –£–¥–∞–ª—è–µ–º –Ω–∞—à—É –∑–∞–¥–∞—á—É
	lines := strings.Split(currentCrontab, "\n")
	var newLines []string
	for _, line := range lines {
		if !strings.Contains(line, i.scriptPath) {
			newLines = append(newLines, line)
		}
	}

	newCrontab := strings.Join(newLines, "\n")

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º crontab
	tempFile, err := os.CreateTemp("", "crontab_*")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer os.Remove(tempFile.Name())

	if _, err := tempFile.WriteString(newCrontab); err != nil {
		tempFile.Close()
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %v", err)
	}
	tempFile.Close()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π crontab
	cmd = exec.Command("crontab", tempFile.Name())
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ crontab: %v", err)
	}

	fmt.Println("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	return nil
}

// ShowAutostartStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
func (i *Installer) ShowAutostartStatus() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π crontab
	cmd := exec.Command("crontab", "-l")
	output, err := cmd.Output()
	if err != nil && !strings.Contains(err.Error(), "no crontab") {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è crontab: %v\n", err)
		return
	}

	currentCrontab := string(output)

	if strings.Contains(currentCrontab, i.scriptPath) {
		fmt.Println("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω")
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ crontab
		lines := strings.Split(currentCrontab, "\n")
		for _, line := range lines {
			if strings.Contains(line, i.scriptPath) {
				fmt.Printf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: %s\n", line)
				break
			}
		}
	} else {
		fmt.Println("‚ùå –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
	fmt.Printf("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–æ–≤: %s\n", ARCHIVE_DIR)
	if _, err := os.Stat(ARCHIVE_DIR); err == nil {
		fmt.Println("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	} else {
		fmt.Println("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞—Ä—Ö–∏–≤–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	}

	fmt.Printf("üìÑ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s\n", STATE_FILE)
	if _, err := os.Stat(STATE_FILE); err == nil {
		fmt.Println("‚úÖ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	} else {
		fmt.Println("‚ùå –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	}
}

func (i *Installer) copySelfToBin() error {
	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
	execPath, err := os.Executable()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ: %v", err)
	}

	// –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
	if err := i.copyFile(execPath, i.scriptPath); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	if err := os.Chmod(i.scriptPath, 0755); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: %v", err)
	}

	fmt.Printf("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ %s\n", i.scriptPath)
	return nil
}

func (i *Installer) createDirectoriesAndFiles() error {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤
	if err := os.MkdirAll(ARCHIVE_DIR, 0755); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %v", ARCHIVE_DIR, err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	if _, err := os.Stat(STATE_FILE); os.IsNotExist(err) {
		if err := os.WriteFile(STATE_FILE, []byte("0"), 0644); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %v", err)
		}
		fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s\n", STATE_FILE)
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	if _, err := os.Stat(TEMP_HOURLY_LOG); os.IsNotExist(err) {
		if err := os.WriteFile(TEMP_HOURLY_LOG, []byte(""), 0644); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
		}
		fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å: %s\n", TEMP_HOURLY_LOG)
	}

	return nil
}

func (i *Installer) addCronJob() error {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π crontab
	cmd := exec.Command("crontab", "-l")
	output, err := cmd.Output()
	if err != nil && !strings.Contains(err.Error(), "no crontab") {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ crontab: %v", err)
	}

	currentCrontab := string(output)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞
	if strings.Contains(currentCrontab, i.scriptPath) {
		fmt.Println("‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ crontab")
		return nil
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
	newCronEntry := fmt.Sprintf("*/10 * * * * %s --cron\n", i.scriptPath)
	newCrontab := currentCrontab + newCronEntry

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º crontab
	tempFile, err := os.CreateTemp("", "crontab_*")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer os.Remove(tempFile.Name())

	if _, err := tempFile.WriteString(newCrontab); err != nil {
		tempFile.Close()
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %v", err)
	}
	tempFile.Close()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π crontab
	cmd = exec.Command("crontab", tempFile.Name())
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ crontab: %v", err)
	}

	fmt.Println("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ crontab: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç")
	return nil
}

func (i *Installer) copyFile(src, dst string) error {
	sourceFile, err := os.Open(src)
	if err != nil {
		return err
	}
	defer sourceFile.Close()

	destFile, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer destFile.Close()

	_, err = destFile.ReadFrom(sourceFile)
	return err
}
